from tkinter import *
#import time
#import hashlib
import matplotlib.image as imgplt
import matplotlib.pyplot as plt
from PIL import Image, ImageTk
#import LL1
#import SemanticAnalysis
import LexicalAnalysis
#import drawTree     #有一个代码段还未封装

#-----------------------------界面布局------------------------------------#
global src

class GUI():
    def __init__(self,init_window_name):
        self.init_window_name = init_window_name #初始化
        

#------------布局--------------#
    def set_init_window(self):
        self.init_window_name.title("6025编译")                                  #窗口名                       
        #self.init_window_name.resizable(False, False)
        face1(self.init_window_name)
        

class face1():
    def __init__(self,master):
        self.master = master
        self.image_face1_file = Image.open("镇魂曲修.jpg")
        self.image_face1_file = self.image_face1_file.resize((1500,800))
        self.face1_photo = ImageTk.PhotoImage(self.image_face1_file)

        self.image_face1_p = Image.open("button1.jpg")
        self.image_face1_p = ImageTk.PhotoImage(self.image_face1_p)
        
        self.R =    Frame(self.master ,padx=1,pady=1)
        self.R.grid(row=0,column = 0)
        self.photo_label = Label(self.R , image=self.face1_photo).grid(row = 0, column = 0,rowspan=16,columnspan=16)
        self.face1_enter_button = Button(self.R  , image=self.image_face1_p , font="微软雅黑" , command = lambda:self.to_face2())
        self.face1_enter_button.grid(row=13 ,column =7)

    
    def to_face2(self):
        self.R.forget()
        face2(self.master)


class face2():
    def __init__(self,master):
        self.master = master
        #---------------face2_photo--------------------#
        self.image_file = Image.open("void.jpg")
        self.image_file = self.image_file.resize((1500,800))
        self.photo = ImageTk.PhotoImage(self.image_file)
        self.F = Frame(self.master ,padx=1,pady=1)
        self.F.grid(row=0,column = 0)
        self.photo_label = Label(self.F , image=self.photo).grid(row = 0, column = 0,rowspan=30,columnspan=40)


        #-----------face2_label--------------#
        self.image_p = Image.open("aba.jpg")
        self.image_p = self.image_p.resize((460,600))
        self.p = ImageTk.PhotoImage(self.image_p)
        self.init_data_label = Label(self.F, text="待编译数据")
        self.init_data_label.grid(row=0, column=6)

        self.result_data_label = Label(self.F, text="编译结果")
        self.result_data_label.grid(row=0, column=15)
        
        self.result_data_label = Label(self.F, text="图片")
        self.result_data_label.grid(row=0, column=25)

        self.log_label = Label(self.F, image = self.p).grid(row=1, column=20 , rowspan =10,columnspan =10 )

        #第二界面_文本框
        self.init_data_Text = Text(self.F, width=71, height=50)               #原始数据录入框
        self.init_data_Text.grid(row=1,column=0, rowspan=10, columnspan=10)         # row 1-11 , column 0-10
        self.result_data_Text = Text(self.F,width=71,height=50)            #处理结果展示
        self.result_data_Text.grid(row=1, column=10, rowspan=10, columnspan=10,sticky=S + W + E + N)     # row 1-11 , column 10-20

        # 滚动条
        self.init_data_Text.scroll = Scrollbar(orient = "vertical", command =self.init_data_Text.yview)
        self.init_data_Text.config(yscrollcommand = self.init_data_Text.scroll.set)
        self.init_data_Text.scroll.grid(row=1, column=1, sticky=S + W + E + N)

        self.result_data_Text.scroll = Scrollbar(orient="vertical", command=self.result_data_Text.yview)
        self.result_data_Text.config(yscrollcommand=self.result_data_Text.scroll.set)
        self.result_data_Text.scroll.grid(row=1, column=1, sticky=S + W + E + N)

        #-----button------#
        self.face2_yy_button = Button(self.F, text="语法分析", bg="lightblue",font="微软雅黑", width=15,command=self.bianyi) 
        self.face2_yy_button.grid(row=18 , column=6)
        self.face2_yf_button = Button(self.F, text="LL1语法分析", bg="lightblue",font="微软雅黑", width=15,command=self.bianyi)
        self.face2_yf_button.grid(row=18 , column=15)
        self.face2_yfs_button = Button(self.F, text="语法树生成", bg="lightblue",font="微软雅黑", width=15,command=self.bianyi)
        self.face2_yfs_button.grid(row=18 , column=25)
        self.face2_dgxj_button = Button(self.F, text="递归下降语法分析", font="微软雅黑",width=15,command=self.bianyi)
        self.face2_dgxj_button.grid(row=19 , column=6)
        self.str_trans_to_md5_button = Button(self.F, text="语义分析",font="微软雅黑", width=15,command=self.bianyi)
        self.str_trans_to_md5_button.grid(row=19 , column=15)
        self.face2_run_button = Button(self.F, text="保存结果并退出",font="微软雅黑", width=15,command=lambda:self.to_face3())          #切换到2 
        self.face2_run_button.grid(row=19 , column=25)

#------------功能函数-----------#
        
    def bianyi(self):
        global src
        global num
        src = self.init_data_Text.get(1.0,END).strip()
        self.obj =LexicalAnalysis.LexicalAnalysis(txt=src+'$')
        stateList=self.obj.analyze()
        #print(stateList)                            #类型流

        charList=list(self.obj.txt)     
        #print(charList)                             #字符流

        self.tokens = self.obj.tokens               #一整个token序列

        j=-1
        begin=0
        store =0
        self.delete();
        for i in stateList:
            j=j+1
            if int(i) in range (1,14):
                if store != int(i) or int(i)==13:
                    if store!=0:
                        self.insert(store)
                        self.insert('     ')
                        self.insert( charList[begin:j])
                        self.insert('\n')
                        self.insert('\n')
                    store = i
                    begin = j
                choose_pic = r"C:\Users\XUECHI\Desktop\picture\图片\Figure_"+ str(i) +".jpg"
                self.img = Image.open(choose_pic)
                self.img = self.img.resize((460,600))
                self.img_png = ImageTk.PhotoImage(self.img)
                self.log_label = Label(self.F, image = self.img_png).grid(row=1, column=20 , rowspan =10,columnspan =10)    # row 1-11 column 20-30
                self.this = charList[j]
                self.insert(self.this )
                self.insert('\n')
                    
                
            else:
                self.insert( "ERROR")
                self.insert('\n')
            self.master.update()
            self.master.after(100)
  


#-------------退出彩蛋--------------------# 
    def to_face3(self):
        self.F.forget()
        face3(self.master)


# -----------输入框输出框操作----------------#

    def insert(self,word):                          #输入
        self.word = word
        self.result_data_Text.insert(END,word)


    def delete(self):                          #删除
        self.result_data_Text.delete(1.0,END)


#--------------得到token序列----------------#
    def get(self):
        return self.obj




#--------------第三页面-----------------------#
class face3():
    def __init__(self , master):
        self.master = master
        self.image_face1_file = Image.open("雪修.jpg")
        self.image_face1_file = self.image_face1_file.resize((1500,800))
        self.face1_photo = ImageTk.PhotoImage(self.image_face1_file)
        self.G =    Frame(self.master ,padx=1,pady=1)
        self.G.grid(row=0,column = 0)
        self.photo_label = Label(self.G , image=self.face1_photo).grid(row = 0, column = 0,rowspan=16,columnspan=16)
        self.face1_enter_button = Button(self.G , text="谢谢观看",bg = 'white' , font="微软雅黑",width=15 , command = lambda:self.to_exit())
        self.face1_enter_button.grid(row=13 ,column =7)

    def to_exit(self):
        self.G.forget()
        

def gui_start():
    init_window = Tk()
    ljh = GUI(init_window)              #设置窗口默认属性
    ljh.set_init_window()
    init_window.mainloop()



        
    
